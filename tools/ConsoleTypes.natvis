
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
    <!-- See https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects?view=vs-2017#BKMK_Syntax_reference for documentation -->
    <Type Name="TextColor">
        <DisplayString Condition="_meta==ColorType::IsIndex256">{{Index256:{_index}}}</DisplayString>
        <DisplayString Condition="_meta==ColorType::IsIndex16">{{Index16:{_index}}}</DisplayString>
        <DisplayString Condition="_meta==ColorType::IsDefault">{{Default}}</DisplayString>
        <DisplayString Condition="_meta==ColorType::IsRgb">{{RGB:{_red},{_green},{_blue}}}</DisplayString>
        <Expand></Expand>
    </Type>

    <Type Name="TextAttribute">
        <!-- You can't do too much trickiness inside the DisplayString format
                string, so we'd have to add entries for each flag if we really
                wanted them to show up like that. -->
        <DisplayString>{{FG: {_foreground}, BG: {_background}, Legacy: {_wAttrLegacy}, {_extendedAttrs}}</DisplayString>
        <Expand>
            <Item Name="Legacy">_wAttrLegacy</Item>
            <Item Name="FG">_foreground</Item>
            <Item Name="BG">_background</Item>
            <Item Name="Extended">_extendedAttrs</Item>
        </Expand>
    </Type>

    <Type Name="Microsoft::Console::Types::Viewport">
        <!-- Can't call functions in here -->
        <DisplayString>{{LT({_sr.left}, {_sr.top}) RB({_sr.right}, {_sr.bottom}) [{_sr.right-_sr.left+1} x { _sr.bottom-_sr.top+1}]}}</DisplayString>
        <Expand>
            <ExpandedItem>_sr</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="_COORD">
        <DisplayString>{{{X},{Y}}}</DisplayString>
    </Type>

    <Type Name="_SMALL_RECT">
        <DisplayString>{{LT({Left}, {Top}) RB({Right}, {Bottom}) In:[{Right-Left+1} x {Bottom-Top+1}] Ex:[{Right-Left} x {Bottom-Top}]}}</DisplayString>
    </Type>

    <Type Name="CharRowCell">
        <DisplayString Condition="_attr._glyphStored">Stored Glyph, go to UnicodeStorage.</DisplayString>
        <DisplayString Condition="_attr._attribute == 0">{_wch,X} Single</DisplayString>
        <DisplayString Condition="_attr._attribute == 1">{_wch,X} Lead</DisplayString>
        <DisplayString Condition="_attr._attribute == 2">{_wch,X} Trail</DisplayString>
    </Type>

    <Type Name="ATTR_ROW">
        <Expand>
            <ExpandedItem>_data</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="CharRow">
        <DisplayString>{{ wrap={_wrapForced} padded={_doubleBytePadded} }}</DisplayString>
        <Expand>
            <ExpandedItem>_data</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="ROW">
        <DisplayString>{{ id={_id} width={_rowWidth} }}</DisplayString>
        <Expand>
            <Item Name="_charRow">_charRow</Item>
            <Item Name="_attrRow">_attrRow</Item>
        </Expand>
    </Type>

    <Type Name="std::unique_ptr&lt;TextBuffer,std::default_delete&lt;TextBuffer&gt;&gt;">
        <Expand>
            <ExpandedItem>_Mypair._Myval2</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="KeyEvent">
        <DisplayString Condition="_keyDown">{{↓ wch:{_charData} mod:{_activeModifierKeys} repeat:{_repeatCount} vk:{_virtualKeyCode} vsc:{_virtualScanCode}}</DisplayString>
        <DisplayString Condition="!_keyDown">{{↑ wch:{_charData} mod:{_activeModifierKeys} repeat:{_repeatCount} vk:{_virtualKeyCode} vsc:{_virtualScanCode}}</DisplayString>
    </Type>

    <Type Name="til::size">
        <DisplayString>{{W: {_width,d} x H: {_height,d} -> A: {_width * _height, d}}}</DisplayString>
    </Type>

    <Type Name="til::point">
        <DisplayString>{{X: {_x,d}, Y: {_y,d}}}</DisplayString>
    </Type>

    <Type Name="til::rect">
        <DisplayString>{{L: {_topLeft._x}, T: {_topLeft._y}, R: {_bottomRight._x} B: {_bottomRight._y}   [W: {_bottomRight._x - _topLeft._x} x H: {_bottomRight._y - _topLeft._y} -> A: {(_bottomRight._x - _topLeft._x) * (_bottomRight._y - _topLeft._y)}]}}</DisplayString>
    </Type>

    <Type Name="til::color">
      <DisplayString>{{RGB: {(int)r,d}, {(int)g,d}, {(int)b,d}; α: {(int)a,d}}}</DisplayString>
    </Type>

    <Type Name="til::rle&lt;*&gt;">
        <DisplayString>{{Size: {_total_length,d}}}</DisplayString>
        <Expand>
            <Item Name="[size]">_total_length</Item>
            <ExpandedItem>_runs</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="til::details::rle_const_iterator&lt;*&gt;">
        <DisplayString>{{run of {_it->first,d} for {_it->second,d} at {_usage,d}}}</DisplayString>
    </Type>

    <Type Name="til::small_vector&lt;*&gt;">
        <DisplayString>{{ size={_size} }}</DisplayString>
        <Expand>
            <Item Name="[capacity]" ExcludeView="simple">_capacity</Item>
            <Item Name="[size]" ExcludeView="simple">_size</Item>
            <ArrayItems>
                <Size>_size</Size>
                <ValuePointer>_data</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="til::small_vector_iterator&lt;*&gt;">
        <AlternativeType Name="til::small_vector_const_iterator&lt;*&gt;" />
        <SmartPointer Usage="Indexable">_ptr,na</SmartPointer>
        <Expand>
            <Item Name="[ptr]">_ptr</Item>
        </Expand>
    </Type>
</AutoVisualizer>
