<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IniLoadError" xml:space="preserve">
    <value>Error loading ini file "{0}"</value>
  </data>
  <data name="IniParseError" xml:space="preserve">
    <value>Error loading ini file "{0}"
    for key "{1}"
    the value "{2}" is invalid</value>
  </data>
  <data name="InvalidColor" xml:space="preserve">
    <value>Invalid Color</value>
  </data>
  <data name="InvalidNumberOfColors" xml:space="preserve">
    <value>Invalid scheme - did not find 16 colors</value>
  </data>
  <data name="OutputUsage" xml:space="preserve">
    <value>Usage: colortool -o &lt;filename&gt;</value>
  </data>
  <data name="SchemeNotFound" xml:space="preserve">
    <value>Could not find or load "{0}"</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Usage:
    ColorTool.exe &lt;Function&gt;
    ColorTool.exe [Options] &lt;Scheme name&gt;

ColorTool is a utility for helping to set the color palette of the Windows Console.
By default, applies the colors in the specified .itermcolors, .json or .ini file to the current console window.
This does NOT save the properties automatically. For that, you'll need to open the properties sheet and hit "Ok".
Included should be a `schemes/` directory with a selection of schemes of both formats for examples.
Feel free to add your own preferred scheme to that directory.

Parameters:
    &lt;Function&gt;   : One and only one of the switches listed in the "Functions" section below.
    &lt;Scheme name&gt;: The name of a color scheme. ColorTool will try to first load it as an .ini file color scheme
                   If that fails, it will look for it as a .json file color scheme
                   If that fails, it will look for it as an .itermcolors file color scheme.
                   Must be the last parameter passed to ColorTool.
    [Option]     : One or more of the switches listed in the "Options" section below. Must appear before scheme
                   name.

Functions:
    You may specify only one of the following switches each time you invoke ColorTool. Any additional switches
    before or after the first one of them will be ignored.

    -?, --help     : Display this help message
    -c, --current  : Print the color table for the currently applied scheme
    -v, --version  : Display the version number
    -l, --location : Displays the full path to the schemes directory
    -s, --schemes  : Displays all available schemes
    -o, --output &lt;filename&gt; : output the current color table to a file in .ini format

Options:
    You may use these switches before a scheme name.

    -q, --quiet    : Don't print the color table after applying
    -e, --errors   : Report scheme parsing errors on the console
    -d, --defaults : Apply the scheme to only the defaults in the registry
                     By default, the scheme would be applied to the current console instead.
    -b, --both     : Apply the scheme to both the current console and the defaults.
                     By default, the scheme would be applied to the current console only.
    -x, --xterm    : Set the colors using VT sequences. Used for setting the colors in WSL.
                     Only works in Windows versions &gt;= 17048.
    -t, --terminal : Output the colors in JSON format for copying into a Windows Terminal settings file.
    -a, --allcolors: Output extended color table. best for >110 column terminals
Available importers:
  {0}</value>
  </data>
  <data name="WroteToDefaults" xml:space="preserve">
    <value>Wrote selected scheme to the defaults.</value>
  </data>
</root>
