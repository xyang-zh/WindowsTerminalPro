parameters:
  additionalBuildArguments: ''

steps:
- checkout: self
  submodules: true
  clean: true
  fetchDepth: 1

- template: restore-nuget-steps.yml

# The environment variable VCToolsInstallDir isn't defined on lab machines, so we need to retrieve it ourselves.
- script: |
    "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -Latest -requires Microsoft.Component.MSBuild -property InstallationPath > %TEMP%\vsinstalldir.txt
    set /p _VSINSTALLDIR15=<%TEMP%\vsinstalldir.txt
    del %TEMP%\vsinstalldir.txt
    call "%_VSINSTALLDIR15%\Common7\Tools\VsDevCmd.bat"
    echo VCToolsInstallDir = %VCToolsInstallDir%
    echo ##vso[task.setvariable variable=VCToolsInstallDir]%VCToolsInstallDir%
  displayName: 'Retrieve VC tools directory'

- task: CmdLine@1
  displayName: 'Display build machine environment variables'
  inputs:
    filename: 'set'

- task: VSBuild@1
  displayName: 'Build solution **\OpenConsole.sln'
  inputs:
    solution: '**\OpenConsole.sln'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    msbuildArgs: "${{ parameters.additionalBuildArguments }} /p:PGOBuildMode=$(PGOBuildMode) /bl:$(Build.SourcesDirectory)\\msbuild.binlog"
    clean: true
    maximumCpuCount: true

- task: PowerShell@2
  displayName: 'Check MSIX for common regressions'
  # PGO runtime needs its own CRT and it's in the package for convenience.
  # That will make this script mad so skip since we're not shipping the PGO Instrumentation one anyway.
  condition: ne(variables['PGOBuildMode'], 'Instrument')
  inputs:
    targetType: inline
    script: |
      $Package = Get-ChildItem -Recurse -Filter "CascadiaPackage_*.msix"
      .\build\scripts\Test-WindowsTerminalPackage.ps1 -Verbose -Path $Package.FullName

- task: powershell@2
  displayName: 'Source Index PDBs'
  condition: ne(variables['PGOBuildMode'], 'Instrument')
  inputs:
    targetType: filePath
    filePath: build\scripts\Index-Pdbs.ps1
    arguments: -SearchDir '$(Build.SourcesDirectory)' -SourceRoot '$(Build.SourcesDirectory)' -recursive -Verbose -CommitId $(Build.SourceVersion)
    errorActionPreference: silentlyContinue

- task: PowerShell@2
  displayName: 'Rationalize build platform'
  inputs:
    targetType: inline
    script: |
      $Arch = "$(BuildPlatform)"
      If ($Arch -Eq "x86") { $Arch = "Win32" }
      Write-Host "##vso[task.setvariable variable=RationalizedBuildPlatform]${Arch}"

- task: CopyFiles@2
  displayName: 'Copy *.appx/*.msix to Artifacts (Non-PR builds only)'
  inputs:
    Contents: |
     **/*.appx
     **/*.msix
     **/*.appxsym
     !**/Microsoft.VCLibs*.appx
    TargetFolder: '$(Build.ArtifactStagingDirectory)/appx'
    OverWrite: true
    flattenFolders: true
  condition: succeeded()

- task: CopyFiles@2
  displayName: 'Copy outputs needed for test runs to Artifacts'
  inputs:
    Contents: |
     $(Build.SourcesDirectory)/bin/$(RationalizedBuildPlatform)/$(BuildConfiguration)/*.exe
     $(Build.SourcesDirectory)/bin/$(RationalizedBuildPlatform)/$(BuildConfiguration)/*.dll
     $(Build.SourcesDirectory)/bin/$(RationalizedBuildPlatform)/$(BuildConfiguration)/*.xml
     **/Microsoft.VCLibs.*.appx
     **/*unit.test*.dll
     **/*unit.test*.manifest
     **/TestHostApp/*.exe
     **/TestHostApp/*.dll
     **/TestHostApp/*.xml
     !**/*.pdb
     !**/*.ipdb
     !**/*.obj
     !**/*.pch
    TargetFolder: '$(Build.ArtifactStagingDirectory)/$(BuildConfiguration)/$(BuildPlatform)/test'
    OverWrite: true
    flattenFolders: true
  condition: succeeded()

- task: PublishBuildArtifacts@1
  displayName: 'Publish All Build Artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'

- task: CopyFiles@2
  displayName: 'Copy PGO databases needed for PGO instrumentation run'
  inputs:
    Contents: |
     **/*.pgd
    TargetFolder: '$(Build.ArtifactStagingDirectory)/$(BuildConfiguration)/PGO/$(BuildPlatform)'
    OverWrite: true
    flattenFolders: true
  condition: and(succeeded(), eq(variables['PGOBuildMode'], 'Instrument'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish All PGO Artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(BuildConfiguration)/PGO'
    ArtifactName: 'PGO'
  condition: and(succeeded(), eq(variables['PGOBuildMode'], 'Instrument'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: binlog'
  condition: always()
  continueOnError: True
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)\msbuild.binlog
    ArtifactName: binlog-$(BuildPlatform)
